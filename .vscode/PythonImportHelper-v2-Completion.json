[
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "initDB",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def initDB():\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    try:\n        cur.execute(\"CREATE TABLE history(egyenloseg, eredmeny, egyben)\")\n    except:\n        pass\ndef menu():\n    while True:\n        menu = input(\"Előzmények(e), Számolás(sz), kilépés(k)\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def menu():\n    while True:\n        menu = input(\"Előzmények(e), Számolás(sz), kilépés(k)\")\n        if menu == \"e\":\n            history()\n            break\n        elif menu == \"sz\":\n            check()\n            break\n        elif menu == \"k\":",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check():\n    feladvany = input(\"Írd be a feladványt\\n>>>\")\n    global question\n    question = feladvany\n    operatorokp = \"+\"\n    operatorokm = \"-\"\n    operatoroksz = \"*\"\n    operatoroko = \"/\"\n    if operatorokp in feladvany or operatorokm in feladvany or operatoroksz in feladvany or operatoroko in feladvany:\n        szamolas()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "szamolas",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def szamolas():\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    eredmeny = eval(question)\n    teljes = f\"{question} = {eredmeny}\"\n    print(teljes)\n    ins = cur.execute(f\"insert into history (egyenloseg, eredmeny, egyben) values ('{question}','{eredmeny}', '{teljes}')\")\n    con.commit()\n    menu()\ndef history():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def history():\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    ins = cur.execute(f\"select egyben FROM history\")\n    teljes = cur.fetchall()\n    for minden in teljes:\n        minden = minden[0]\n        print(minden)\n    menu()\nif __name__ == \"__main__\":",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "question = \"\"\ndef initDB():\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    try:\n        cur.execute(\"CREATE TABLE history(egyenloseg, eredmeny, egyben)\")\n    except:\n        pass\ndef menu():\n    while True:",
        "detail": "main",
        "documentation": {}
    }
]