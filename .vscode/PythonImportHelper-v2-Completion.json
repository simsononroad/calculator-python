[
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "initDB",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def initDB():\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    try:\n        cur.execute(\"CREATE TABLE history(egyenloseg, eredmeny, egyben, date)\")\n    except:\n        pass\ndef menu():\n    while True:\n        os.system(\"cls\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def menu():\n    while True:\n        os.system(\"cls\")\n        print(\"Menü\")\n        menu = input(\"Előzmények(e), Számolás(sz), kilépés(k)\")\n        if menu == \"e\":\n            history()\n            break\n        elif menu == \"sz\":\n            check()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check():\n    os.system(\"cls\")\n    print(\"Menü > számolás\")\n    feladvany = input(\"Írd be a feladványt\\n>>>\")\n    global question\n    question = feladvany\n    operatorokp = \"+\"\n    operatorokm = \"-\"\n    operatoroksz = \"*\"\n    operatoroko = \"/\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "szamolas",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def szamolas():\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    eredmeny = eval(question)\n    teljes = f\"{question} = {eredmeny}\"\n    print(teljes)\n    time = datetime.datetime.now()\n    nowtime = time.strftime(\"%Y.%m.%d - %H:%M:%S\")\n    ins = cur.execute(f\"insert into history (egyenloseg, eredmeny, egyben, date) values ('{question}','{eredmeny}', '{teljes}', '{nowtime}')\")\n    con.commit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def history():\n    os.system(\"cls\")\n    print(\"Menü > előzmények\")\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    ins = cur.execute(f\"select egyben FROM history\")\n    teljes = cur.fetchall()\n    for minden in teljes:\n        minden = minden[0]\n        print(minden)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "question = \"\"\nimport datetime\nimport os\nimport time\ndef initDB():\n    con = sqlite3.connect(\"szamolasok.db\")\n    cur = con.cursor()\n    try:\n        cur.execute(\"CREATE TABLE history(egyenloseg, eredmeny, egyben, date)\")\n    except:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "time = datetime.datetime.now()\nnowtime = time.strftime(\"%Y.%m.%d - %H:%M:%S\")",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "nowtime",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "nowtime = time.strftime(\"%Y.%m.%d - %H:%M:%S\")",
        "detail": "test",
        "documentation": {}
    }
]